description: Download Redmine

parameters:
  cache_key_prefix:
    description: Prefix of cache key
    type: string
    default: redmine-plugin-commands-download-v2-
  version:
    description: Redmine version
    type: string
    default: latest
  destination:
    description: Destination path
    type: string
    default: redmine
  product:
    description: "'redmine' or 'redmica'"
    type: enum
    enum: ["redmine", "redmica"]
    default: "redmine"

steps:
  - run:
      name: Determine Redmine/Redmica version
      command: |
        extract_latest_redmine_version() {
          curl -s https://api.github.com/repos/redmine/redmine/tags |
          jq -r '.[0].name' > .version
        }

        extract_latest_redmica_version() {
          curl -s https://api.github.com/repos/redmica/redmica/tags |
          jq -r '.[0].name' |
          sed -e 's/^v//' > .version
        }

        version=<< parameters.version >>
        product=<< parameters.product >>

        echo $version > .version

        if [ "$version" == "latest" ]; then
          if [ "$product" == "redmine" ]; then
            extract_latest_redmine_version
          elif [ "$product" == "redmica" ]; then
            extract_latest_redmica_version
          fi
        fi

        echo "Test product: << parameters.product >>@$(cat .version)"
  - restore_cache:
      keys:
        - '<< parameters.cache_key_prefix >><< parameters.product >>-<< parameters.version >>-{{ checksum ".version" }}'
  - when:
      condition:
        equal: [ redmine, << parameters.product >> ]
      steps:
        - run:
            name: Download << parameters.product >> << parameters.version >>
            command: |
              if [ ! -d << parameters.product >>-<< parameters.version >> ]; then
                version="$(cat .version)"
                curl -L "https://github.com/redmine/redmine/archive/$version.tar.gz" | tar zx
                if [ "$version" != << parameters.version >> ]; then
                  mv -v << parameters.product >>-"$version" << parameters.product >>-<< parameters.version >>
                fi
                cp -av .version << parameters.product >>-<< parameters.version >>/
              fi
  - when:
      condition:
        equal: [ redmica, << parameters.product >> ]
      steps:
        - run:
            name: Download << parameters.product >> << parameters.version >>
            # https://github.com/redmica/redmica/archive/v2.0.0 # `v2.0.0` not `2.0.0`
            command: |
              if [ ! -d << parameters.product >>-<< parameters.version >> ]; then
                version="$(cat .version)"
                curl -L "https://github.com/redmica/redmica/archive/v$version.tar.gz" | tar zx
                if [ "$version" != << parameters.version >> ]; then
                  mv -v << parameters.product >>-"$version" << parameters.product >>-<< parameters.version >>
                fi
                cp -av .version << parameters.product >>-<< parameters.version >>/
              fi
  - save_cache:
      key: '<< parameters.cache_key_prefix >><< parameters.product >>-<< parameters.version >>-{{ checksum ".version" }}'
      paths:
        - << parameters.product >>-<< parameters.version >>
  - run:
      name: Move << parameters.product >> to << parameters.destination >>
      command: mv << parameters.product >>-<< parameters.version >> << parameters.destination >>
