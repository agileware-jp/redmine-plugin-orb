version: 2.1

orbs:
  redmine-plugin: agileware-jp/redmine-plugin@<<pipeline.parameters.dev-orb-version>>
  orb-tools: circleci/orb-tools@9.1.0
  browser-tools: circleci/browser-tools@1.5.0

# Pipeline parameters
parameters:
  # These pipeline parameters are required by the "trigger-integration-tests-workflow"
  # job, by default.
  run-integration-tests:
    type: boolean
    default: false
  dev-orb-version:
    type: string
    default: 'dev:alpha'

common_environment: &common_environment
  context:
    - lychee-ci-environment

jobs: # Integration Testing jobs
  test-download-redmine:
    executor: orb-tools/ubuntu
    steps:
      - redmine-plugin/download-redmine:
          version: '4.1.7'
      - run:
          name: Check if redmine exists
          command: test -f redmine/lib/redmine.rb
      - run:
          name: Check if redmine has the downloaded version
          command: |
            egrep "MAJOR.+4" redmine/lib/redmine/version.rb
            egrep "MINOR.+1" redmine/lib/redmine/version.rb
            egrep "TINY.+7" redmine/lib/redmine/version.rb
      - redmine-plugin/download-redmine:
          destination: 'redmine-min'
          version: '$REDMINE_MIN_VERSION'
      - run:
          name: Check if there is a .version file containing the specified version
          command: test "`cat redmine-min/.version`" = "$REDMINE_MIN_VERSION"
  test-download-redmine-supported-min-version:
    executor: orb-tools/ubuntu
    steps:
      - redmine-plugin/download-redmine:
          version: $REDMINE_MIN_VERSION
      - run:
          name: Check if redmine exists
          command: test -f redmine/lib/redmine.rb
      - run:
          name: Check if redmine has the downloaded version
          command: |
            IFS='.' read -ra digits < <(echo "$REDMINE_MIN_VERSION")
            egrep "MAJOR.+${digits[0]}" redmine/lib/redmine/version.rb
            egrep "MINOR.+${digits[1]}" redmine/lib/redmine/version.rb
            egrep "TINY.+${digits[2]}" redmine/lib/redmine/version.rb
      - run:
          name: Check if there is a .version file containing the specified version
          command: test "`cat redmine/.version`" = "$REDMINE_MIN_VERSION"
  test-download-redmine-latest:
    executor: orb-tools/ubuntu
    steps:
      - redmine-plugin/download-redmine:
          version: latest
      - run:
          name: Check if redmine exists
          command: test -f redmine/lib/redmine.rb
      - run:
          name: Check if there is a .version file containing latest version
          command: |
            cat redmine/.version
            test $(cat redmine/.version) = $(
              curl -s https://api.github.com/repos/redmine/redmine/tags |
              jq -r '.[0].name'
            )
  test-download-redmine-supported-max-version:
    executor: orb-tools/ubuntu
    steps:
      - redmine-plugin/download-redmine:
          version: $REDMINE_MAX_VERSION
      - run:
          name: Check if redmine exists
          command: test -f redmine/lib/redmine.rb
      - run:
          name: Check if redmine has the downloaded version
          command: |
            version=$REDMINE_MAX_VERSION

            if [ "$version" == "latest" ]; then
              cat redmine/.version
              test $(cat redmine/.version) = $(
                curl -s https://api.github.com/repos/redmine/redmine/tags |
                jq -r '.[0].name'
              )
            else
              IFS='.' read -ra digits < <(echo "$version")
              egrep "MAJOR.+${digits[0]}" redmine/lib/redmine/version.rb
              egrep "MINOR.+${digits[1]}" redmine/lib/redmine/version.rb
              egrep "TINY.+${digits[2]}" redmine/lib/redmine/version.rb
            fi
  test-download-redmine-latest-tiny-version:
    executor: orb-tools/ubuntu
    steps:
      - redmine-plugin/download-redmine:
          version: '$REDMINE_MIN_VERSION'
      - run:
          name: Check if redmine exists
          command: test -f redmine/lib/redmine.rb
      - run:
          name: Check if there is a .version file containing latest version
          command: |
            test "$(cat redmine/.version)" = "$REDMINE_MIN_VERSION"
  test-download-redmica:
    executor: orb-tools/ubuntu
    steps:
      - redmine-plugin/download-redmine:
          product: 'redmica'
          version: '2.0.0'
          destination: 'wrk'
      - run:
          name: Check if redmica exists
          command: test -f wrk/lib/redmine.rb
      - run:
          name: Check if redmica has the downloaded version
          command: |
            egrep -A 5 "module\s+RedMica" wrk/lib/redmine/version.rb | egrep "MAJOR.+2"
            egrep -A 5 "module\s+RedMica" wrk/lib/redmine/version.rb | egrep "MINOR.+0"
            egrep -A 5 "module\s+RedMica" wrk/lib/redmine/version.rb | egrep "TINY.+0"
      - run:
          name: Check if there is a .version file containing the specified version
          command: test "`cat wrk/.version`" = "2.0.0"
  test-download-redmica-latest:
    executor: orb-tools/ubuntu
    steps:
      - redmine-plugin/download-redmine:
          product: 'redmica'
          version: latest
          destination: 'wrk'
      - run:
          name: Check if redmica exists
          command: egrep "module\s+RedMica" wrk/lib/redmica/version.rb
      - run:
          name: Check if there is a .version file containing latest version
          command: |
            cat wrk/.version
            test $(cat wrk/.version) = $(
              curl -s https://api.github.com/repos/redmica/redmica/tags |
              jq -r '.[0].name' |
              sed -e 's/^v//'
            )
  test-download-redmica-latest-tiny-version:
    executor: orb-tools/ubuntu
    steps:
      - redmine-plugin/download-redmine:
          product: 'redmica'
          version: '2.1'
      - run:
          name: Check if redmine exists
          command: test -f redmine/lib/redmine.rb
      - run:
          name: Check if there is a .version file containing latest version
          command: |
            test "$(cat redmine/.version)" = "2.1.1"
  test-download-redmine-trunk:
    docker:
      - image: circleci/buildpack-deps:stretch-scm
    steps:
      - redmine-plugin/download-redmine-trunk
      - run:
          name: Check if redmine exists
          command: test -f redmine/lib/redmine.rb
      - run:
          name: Check if there is a .version file containing "trunk"
          command: test "`cat redmine/.version`" = "trunk"
  test-download-redmine-git-url:
    docker:
      - image: buildpack-deps:bookworm-scm
    steps:
      - redmine-plugin/download-redmine-git-url:
          version: 8cb776d916a328acfc8a37ceb67fd322d1157c84
      - run:
          name: Check if redmine exists
          command: test -f redmine/lib/redmine.rb
      - run:
          name: Check if there is a .redmine-commit-id file containing specified commit ID
          command: test "$(cat redmine/.redmine-commit-id)" = "8cb776d916a328acfc8a37ceb67fd322d1157c84"
  test-install-plugin:
    executor: orb-tools/ubuntu
    steps:
      - checkout # To resolve ssh problems with git later
      - redmine-plugin/download-redmine:
          version: '$REDMINE_MIN_VERSION'
      - redmine-plugin/install-plugin:
          repository: git@github.com:agileware-jp/redmine_work_days.git
      - run:
          name: Check if the plugin was installed
          command: test -f redmine/plugins/redmine_work_days/init.rb
  test-install-self:
    executor: orb-tools/ubuntu
    steps:
      - redmine-plugin/download-redmine:
          version: '$REDMINE_MIN_VERSION'
      - redmine-plugin/install-self
      - run:
          name: Check if the repository was added to plugins
          command: test -f redmine/plugins/redmine-plugin-orb/src/@orb.yml
      - run:
          name: Check if Gemfile.local was copied
          command: diff -u redmine/plugins/redmine-plugin-orb/Gemfile.local redmine/Gemfile.local
  test-generate-database_yml:
    executor: redmine-plugin/ruby-mysql
    steps:
      - redmine-plugin/download-redmine:
          version: '$REDMINE_MIN_VERSION'
      - redmine-plugin/generate-database_yml
      - run:
          name: Check if the correct database.yml was created
          command: 'egrep "adapter: mysql2" redmine/config/database.yml'
  test-bundle-install-without-Gemfile_local:
    executor:
      name: redmine-plugin/ruby-sqlite3
      ruby_version: '$RUBY_MIN_VERSION'
    steps:
      - checkout # To resolve ssh problems with git later
      - redmine-plugin/download-redmine:
          version: '$REDMINE_MIN_VERSION'
      - redmine-plugin/generate-database_yml
      - redmine-plugin/bundle-install
      - run:
          name: Check if Gemfile.local was created
          command: test -f redmine/Gemfile.local
  test-bundle-install-and-rspec:
    executor:
      name: redmine-plugin/ruby-sqlite3
      ruby_version: '$RUBY_MIN_VERSION'
    steps:
      - checkout # To resolve ssh problems with git later
      - redmine-plugin/download-redmine:
          version: '$REDMINE_MIN_VERSION'
      - redmine-plugin/install-plugin:
          repository: git@github.com:agileware-jp/redmine_issue_trash.git
      - run:
          name: Copy Gemfile.local
          command: cp redmine/plugins/redmine_issue_trash/Gemfile.local redmine/
      - redmine-plugin/generate-database_yml
      # NOTE: For Redmine v4.2, it is necessary to upgrade the version of selenium-webdriver to avoid the error:
      #       "NameError: uninitialized constant Selenium::WebDriver::Chrome::Options".
      #       This command updates the version of selenium-webdriver in the Gemfile to 3.4.0 or later.
      - run:
          name: Update selenium-webdriver version in Gemfile
          working_directory: redmine
          command: |
            VERSION=$(grep "selenium-webdriver" Gemfile | grep -o '[0-9]*\.[0-9]*\.[0-9]*' | head -n 1 || true)
            if [ -z "${VERSION}" ]; then
              echo "selenium-webdriver version not found in Gemfile. updated to >= 3.4.0."
              sed -i 's/gem "selenium-webdriver".*/gem "selenium-webdriver", ">= 3.4.0"/' Gemfile
            else
              if [ "${VERSION:0:1}" = "3" ] && [ "${VERSION:2:1}" -le 4 ]; then
                echo "selenium-webdriver version updated to >= 3.4.0 in Gemfile."
                sed -i 's/gem "selenium-webdriver".*/gem "selenium-webdriver", ">= 3.4.0"/' Gemfile
              else
                echo "No update needed for selenium-webdriver version in Gemfile."
              fi
            fi
      - redmine-plugin/bundle-install
      - redmine-plugin/rspec:
          plugin: redmine_issue_trash
      - run:
          name: Check if the test result file exists
          command: test -f /tmp/rspec/rspec.xml
      - run:
          name: Check if the coverage result file exists
          command: test -f /tmp/coverage/index.html
  test-bundle-install-and-test:
    executor:
      name: redmine-plugin/ruby-sqlite3
      ruby_version: '$RUBY_MIN_VERSION'
    steps:
      - checkout # To resolve ssh problems with git later
      - redmine-plugin/download-redmine:
          version: '$REDMINE_MIN_VERSION'
      - redmine-plugin/install-plugin:
          repository: git@github.com:agileware-jp/redmine_issue_trash.git
      - run:
          name: Copy Gemfile.local
          command: cp redmine/plugins/redmine_issue_trash/Gemfile.local redmine/
      - redmine-plugin/generate-database_yml
      - redmine-plugin/bundle-install
      - redmine-plugin/test:
          plugin: redmine_issue_trash
  test-build-plugin-assets:
    docker:
      - image: cimg/node:12.18.2
    steps:
      - checkout
      - run:
          name: Set .node-version
          command: echo '12.18.2' > .node-version
      - redmine-plugin/build-plugin-assets:
          plugin_folder: '~/project'
          cache_key_prefix: build-without-docker
      - run:
          name: Check if the built file exists
          command: test -f ~/project/assets/test.js
  test-build-plugin-assets-with-docker:
    machine: true
    steps:
      - checkout
      - run:
          name: Set .node-version
          command: echo '12.18.2' > .node-version
      - redmine-plugin/build-plugin-assets:
          plugin_folder: '~/project'
          use_docker: true
          cache_key_prefix: build-with-docker
      - run:
          name: Check if the built file exists
          command: test -f ~/project/assets/test.js

workflows:
  lint-pack-validate-start-tests:
    unless: << pipeline.parameters.run-integration-tests >>
    jobs:
      - orb-tools/lint:
          name: Lint Orb
      - orb-tools/pack:
          name: Pack Orb
          requires:
            - Lint Orb
      - orb-tools/publish-dev:
          name: Publish dev version
          orb-name: agileware-jp/redmine-plugin
          requires:
            - Pack Orb
      - orb-tools/trigger-integration-tests-workflow:
          name: Start integration tests
          requires:
            - Publish dev version
  test-and-release:
    when: << pipeline.parameters.run-integration-tests >>
    jobs:
      - test-download-redmine:
          <<: *common_environment
      - test-download-redmine-latest
      - test-download-redmine-latest-tiny-version:
          <<: *common_environment
      - test-download-redmine-trunk
      - test-download-redmine-git-url
      - test-download-redmine-supported-max-version:
          <<: *common_environment
      - test-download-redmine-supported-min-version:
          <<: *common_environment
      - test-download-redmica
      - test-download-redmica-latest
      - test-download-redmica-latest-tiny-version
      - test-install-plugin:
          <<: *common_environment
      - test-install-self:
          <<: *common_environment
      - test-generate-database_yml:
          <<: *common_environment
      - test-bundle-install-without-Gemfile_local:
          <<: *common_environment
      - test-bundle-install-and-rspec:
          <<: *common_environment
      - test-bundle-install-and-test:
          <<: *common_environment
      - test-build-plugin-assets
      - test-build-plugin-assets-with-docker

      # publish a semver version of the orb. relies on
      # the commit subject containing the text "[semver:patch|minor|major|skip]"
      # as that will determine whether a patch, minor or major
      # version will be published or if publishing should
      # be skipped.
      # e.g. [semver:patch] will cause a patch version to be published.
      - orb-tools/dev-promote-prod-from-commit-subject:
          add-pr-comment: false
          fail-if-semver-not-indicated: true
          orb-name: agileware-jp/redmine-plugin
          publish-version-tag: false
          requires:
            - test-download-redmine
            - test-download-redmine-latest
            - test-download-redmine-latest-tiny-version
            - test-download-redmine-trunk
            - test-download-redmine-supported-max-version
            - test-download-redmine-supported-min-version
            - test-download-redmica
            - test-download-redmica-latest
            - test-download-redmica-latest-tiny-version
            - test-install-plugin
            - test-install-self
            - test-generate-database_yml
            - test-bundle-install-without-Gemfile_local
            - test-bundle-install-and-rspec
            - test-bundle-install-and-test
            - test-build-plugin-assets
            - test-build-plugin-assets-with-docker
          filters:
            branches:
              only: master
